# File generated by "php artisan lighthouse:ide-helper".
# Do not edit this file directly.
# This file should be ignored by git as it can be autogenerated.

"""
The `ID` scalar type represents a unique identifier, often used to
refetch an object or as key for a cache. The ID type appears in a JSON
response as a String; however, it is not intended to be human-readable.
When expected as an input type, any string (such as `"4"`) or integer
(such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `String` scalar type represents textual data, represented as UTF-8
character sequences. The String type is most often used by GraphQL to
represent free-form human-readable text.
"""
scalar String

"""
The `Int` scalar type represents non-fractional signed whole numeric
values. Int can represent values between -(2^31) and 2^31 - 1. 
"""
scalar Int

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""
The `Float` scalar type represents signed double-precision fractional
values as specified by
[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
"""
scalar Float

"""A paginated list of Category items."""
type CategoryPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Category items."""
  data: [Category!]!
}

"""Information about pagination using a fully featured paginator."""
type PaginatorInfo {
  """Number of items in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the first item in the current page."""
  firstItem: Int

  """Are there more pages after this one?"""
  hasMorePages: Boolean!

  """Index of the last item in the current page."""
  lastItem: Int

  """Index of the last available page."""
  lastPage: Int!

  """Number of items per page."""
  perPage: Int!

  """Number of total available items."""
  total: Int!
}

"""A paginated list of Order items."""
type OrderPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Order items."""
  data: [Order!]!
}

"""A paginated list of Review items."""
type ReviewPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Review items."""
  data: [Review!]!
}

"""A paginated list of Wishlist items."""
type WishlistPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Wishlist items."""
  data: [Wishlist!]!
}

"""A paginated list of CartPayment items."""
type CartPaymentPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CartPayment items."""
  data: [CartPayment!]!
}

"""A paginated list of Product items."""
type ProductPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Product items."""
  data: [Product!]!
}

"""A paginated list of Attribute items."""
type AttributePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Attribute items."""
  data: [Attribute!]!
}

"""A paginated list of AttributeOption items."""
type AttributeOptionPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of AttributeOption items."""
  data: [AttributeOption!]!
}

"""A paginated list of AttributeTranslation items."""
type AttributeTranslationPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of AttributeTranslation items."""
  data: [AttributeTranslation!]!
}

"""A paginated list of AttributeOptionTranslation items."""
type AttributeOptionTranslationPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of AttributeOptionTranslation items."""
  data: [AttributeOptionTranslation!]!
}

"""A paginated list of AttributeGroup items."""
type AttributeGroupPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of AttributeGroup items."""
  data: [AttributeGroup!]!
}

"""A paginated list of AttributeFamily items."""
type AttributeFamilyPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of AttributeFamily items."""
  data: [AttributeFamily!]!
}

"""A paginated list of BookingProduct items."""
type BookingProductPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of BookingProduct items."""
  data: [BookingProduct!]!
}

"""A paginated list of Booking items."""
type BookingPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Booking items."""
  data: [Booking!]!
}

"""A paginated list of ProductFlat items."""
type ProductFlatPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of ProductFlat items."""
  data: [ProductFlat!]!
}

"""A paginated list of Customer items."""
type CustomerPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Customer items."""
  data: [Customer!]!
}

"""A paginated list of CustomerAddress items."""
type CustomerAddressPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CustomerAddress items."""
  data: [CustomerAddress!]!
}

"""A paginated list of CustomerGroup items."""
type CustomerGroupPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CustomerGroup items."""
  data: [CustomerGroup!]!
}

"""A paginated list of Subscriber items."""
type SubscriberPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Subscriber items."""
  data: [Subscriber!]!
}

"""A paginated list of Channel items."""
type ChannelPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Channel items."""
  data: [Channel!]!
}

"""A paginated list of CoreConfig items."""
type CoreConfigPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CoreConfig items."""
  data: [CoreConfig!]!
}

"""A paginated list of Country items."""
type CountryPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Country items."""
  data: [Country!]!
}

"""A paginated list of CountryState items."""
type CountryStatePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CountryState items."""
  data: [CountryState!]!
}

"""A paginated list of Currency items."""
type CurrencyPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Currency items."""
  data: [Currency!]!
}

"""A paginated list of ExchangeRate items."""
type ExchangeRatePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of ExchangeRate items."""
  data: [ExchangeRate!]!
}

"""A paginated list of InventorySource items."""
type InventorySourcePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of InventorySource items."""
  data: [InventorySource!]!
}

"""A paginated list of Locale items."""
type LocalePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Locale items."""
  data: [Locale!]!
}

"""A paginated list of Role items."""
type RolePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Role items."""
  data: [Role!]!
}

"""A paginated list of Slider items."""
type SliderPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Slider items."""
  data: [Slider!]!
}

"""A paginated list of TaxCategory items."""
type TaxCategoryPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of TaxCategory items."""
  data: [TaxCategory!]!
}

"""A paginated list of TaxRate items."""
type TaxRatePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of TaxRate items."""
  data: [TaxRate!]!
}

"""A paginated list of User items."""
type UserPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of User items."""
  data: [User!]!
}

"""A paginated list of Invoice items."""
type InvoicePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Invoice items."""
  data: [Invoice!]!
}

"""A paginated list of InvoiceItem items."""
type InvoiceItemPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of InvoiceItem items."""
  data: [InvoiceItem!]!
}

"""A paginated list of Shipment items."""
type ShipmentPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Shipment items."""
  data: [Shipment!]!
}

"""A paginated list of Refund items."""
type RefundPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Refund items."""
  data: [Refund!]!
}

"""A paginated list of OrderItem items."""
type OrderItemPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of OrderItem items."""
  data: [OrderItem!]!
}

"""A paginated list of RefundItem items."""
type RefundItemPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of RefundItem items."""
  data: [RefundItem!]!
}

"""A paginated list of ShipmentItem items."""
type ShipmentItemPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of ShipmentItem items."""
  data: [ShipmentItem!]!
}

"""A paginated list of HeaderContent items."""
type HeaderContentPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of HeaderContent items."""
  data: [HeaderContent!]!
}

"""A paginated list of ContentTranslation items."""
type ContentTranslationPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of ContentTranslation items."""
  data: [ContentTranslation!]!
}

"""A paginated list of MetaData items."""
type MetaDataPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of MetaData items."""
  data: [MetaData!]!
}

"""A paginated list of OrderBrand items."""
type OrderBrandPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of OrderBrand items."""
  data: [OrderBrand!]!
}

"""A paginated list of CmsPage items."""
type CmsPagePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CmsPage items."""
  data: [CmsPage!]!
}

"""A paginated list of CmsTranslation items."""
type CmsTranslationPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CmsTranslation items."""
  data: [CmsTranslation!]!
}

"""A paginated list of CartRule items."""
type CartRulePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CartRule items."""
  data: [CartRule!]!
}

"""A paginated list of CatalogRule items."""
type CatalogRulePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CatalogRule items."""
  data: [CatalogRule!]!
}

"""A paginated list of CatalogRuleProduct items."""
type CatalogRuleProductPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CatalogRuleProduct items."""
  data: [CatalogRuleProduct!]!
}

"""A paginated list of CatalogRuleProductPrice items."""
type CatalogRuleProductPricePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CatalogRuleProductPrice items."""
  data: [CatalogRuleProductPrice!]!
}

type Mutation {
  updateAccount(input: UpdateAccountInput!): AccountInfoResult
  deleteAccount(input: DeleteAccountInput!): AccountDeleteResponse
  createAddress(input: CreateAddressInput!): AddressListResult
  updateAddress(id: ID!, input: UpdateAddressInput!): AddressListResult
  deleteAddress(id: ID!): AddressListResult
  addToCompare(input: AddToCompareInput!): AddToCompareResponse
  removeFromCompareProduct(input: AddToCompareInput!): RemoveCompareResponse
  removeAllCompareProducts: RemoveCompareResponse
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordResponse
  customerRegister(input: CreateRegisterInput!): CustomerRegisterResponse
  createReview(input: CreateReviewInput!): CreateReviewResponse
  deleteReview(id: ID!): DeleteReviewResponse
  customerLogin(input: LoginInput!): CustomerLoginResult
  customerLogout: CustomerLogoutResponse
  addToWishlist(input: AddToWishlistInput!): AddToWishlistResponse
  removeFromWishlist(input: AddToWishlistInput!): RemoveWishlistResponse
  moveToCart(id: ID): MoveToCartResponse
  removeAllWishlists: RemoveWishlistResponse
  addItemToCart(input: AddItemToCartInput!): CartItemResponse
  updateItemToCart(input: UpdateItemToCartInput!): CartItemResponse
  removeCartItem(id: ID!): CartItemResponse
  moveToWishlist(id: ID!): CartItemResponse
  applyCoupon(input: ApplyCouponInput!): CouponResponse
  placeOrder: PlacedOrderResponse
  saveCheckoutAddresses(input: SaveShippingAddressInput!): ShippingMethodsResponse
  savePayment(input: SavePaymentMethodInput!): ReviewOrderResponse
  paymentMethods(input: SaveShippingMethodInput!): PaymentMethodsResponse
  createAttribute(input: CreateAttributeInput!): Attribute
  updateAttribute(id: ID!, input: CreateAttributeInput!): Attribute
  deleteAttribute(id: ID!): Attribute
  createAttributeGroup(input: CreateAttributeGroupInput!): AttributeGroup
  updateAttributeGroup(id: ID!, input: CreateAttributeGroupInput!): AttributeGroup
  deleteAttributeGroup(id: ID!): AttributeGroup
  createAttributeFamily(input: CreateAttributeFamilyInput!): AttributeFamily
  updateAttributeFamily(id: ID!, input: CreateAttributeFamilyInput!): AttributeFamily
  deleteAttributeFamily(id: ID!): AttributeFamily
  createCategory(input: CreateCategoryInput!): Category
  updateCategory(id: ID!, input: CreateCategoryInput!): Category
  deleteCategory(id: ID!): Category
  createProduct(input: CreateProductInput!): Product
  updateProduct(id: ID!, input: UpdateProductInput!): Product
  deleteProduct(id: ID!): Product
  createCustomer(input: CreateCustomerInput!): Customer
  updateCustomer(id: ID!, input: CreateCustomerInput!): Customer
  deleteCustomer(id: ID!): Customer
  createCustomerAddress(input: CreateCustomerAddressInput!): CustomerAddress
  updateCustomerAddress(id: ID!, input: CreateCustomerAddressInput!): CustomerAddress
  deleteCustomerAddress(id: ID!): Customer
  createCustomerGroup(input: CreateCustomerGroupInput!): CustomerGroup
  updateCustomerGroup(id: ID!, input: CreateCustomerGroupInput!): CustomerGroup
  deleteCustomerGroup(id: ID!): CustomerGroup
  subscribe(input: SubscriberInput!): Subscriber
  unSubscribe(token: String!): Subscriber
  deleteSubscriber(email: String!): Subscriber
  createChannel(input: CreateChannelInput!): Channel
  updateChannel(id: ID!, input: CreateChannelInput!): Channel
  deleteChannel(id: ID!): Channel
  createCurrency(input: CreateCurrencyInput!): Currency
  updateCurrency(id: ID!, input: CreateCurrencyInput!): Currency
  deleteCurrency(id: ID!): Currency
  createCustomScript(input: CreateCustomScriptInput!): CustomScript
  updateCustomCSSScript(input: UpdateCustomCSSInput!): CustomScript
  updateCustomJSScript(input: UpdateCustomJSInput!): CustomScript
  deleteCustomScript(id: ID!): CustomScript
  createExchangeRate(input: CreateExchangeRateInput!): ExchangeRate
  updateExchangeRate(id: ID!, input: CreateExchangeRateInput!): ExchangeRate
  deleteExchangeRate(id: ID!): ExchangeRate
  createInventorySource(input: createInventorySourceInput!): InventorySource
  updateInventorySource(id: ID!, input: createInventorySourceInput!): InventorySource
  deleteInventorySource(id: ID!): InventorySource
  createLocale(input: CreateLocaleInput!): Locale
  updateLocale(id: ID!, input: CreateLocaleInput!): Locale
  deleteLocale(id: ID!): Locale
  createRole(input: CreateRoleInput!): Role
  updateRole(id: ID!, input: CreateRoleInput!): Role
  deleteRole(id: ID!): Role
  createTaxCategory(input: createTaxCategoryInput!): TaxCategory
  updateTaxCategory(id: ID!, input: createTaxCategoryInput!): TaxCategory
  deleteTaxCategory(id: ID!): TaxCategory
  createTaxRate(input: createTaxRateInput!): TaxRate
  updateTaxRate(id: ID!, input: createTaxRateInput!): TaxRate
  deleteTaxRate(id: ID!): TaxRate
  createUser(input: CreateUserInput!): User
  updateUser(id: ID!, input: CreateUserInput!): User
  deleteUser(id: ID!): User
  userLogin(input: CreateUserLoginInput!): LoginResponse
  userLogout: LogoutResponse
  createInvoice(input: CreateInvoiceInput!): Invoice
  cancelOrder(id: ID!): Order
  createRefund(input: CreateRefundInput!): Refund
  createShipment(input: CreateShipmentInput!): Shipment
  createHeaderContent(input: CreateHeaderContentInput!): HeaderContent
  updateHeaderContent(id: ID!, input: CreateHeaderContentInput!): HeaderContent
  deleteHeaderContent(id: ID!): HeaderContent
  updateMetaData(id: ID!, input: CreateMetaDataInput!): MetaData
  createCmsPage(input: CreateCmsPageInput!): CmsPage
  updateCmsPage(id: ID!, input: CreateCmsPageInput!): CmsPage
  deleteCmsPage(id: ID!): CmsPage
  createCartRule(input: CreateCartRuleInput!): CartRule
  updateCartRule(id: ID!, input: UpdateCartRuleInput!): CartRule
  deleteCartRule(id: ID!): CartRule
  createCatalogRule(input: CreateCatalogRuleInput!): CatalogRule
  updateCatalogRule(id: ID!, input: CreateCatalogRuleInput!): CatalogRule
  deleteCatalogRule(id: ID!): CatalogRule
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all
available types and directives on the server, as well as the entry points for
query, mutation, and subscription operations.
"""
type __Schema {
  """A list of all types supported by this server."""
  types: [__Type!]!

  """The type that query operations will be rooted at."""
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """A list of all directives supported by this server."""
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of
types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that
type. Scalar types provide no information beyond a name and description, while
Enum types provide their values. Object and Interface types provide the fields
they describe. Abstract types, Union and Interface, provide the Object types
possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!
  name: String
  description: String
  fields(includeDeprecated: Boolean = false): [__Field!]
  interfaces: [__Type!]
  possibleTypes: [__Type!]
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  inputFields: [__InputValue!]
  ofType: __Type
}

"""An enum describing what kind of type a given `__Type` is."""
enum __TypeKind {
  """Indicates this type is a scalar."""
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """Indicates this type is a union. `possibleTypes` is a valid field."""
  UNION

  """Indicates this type is an enum. `enumValues` is a valid field."""
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """Indicates this type is a list. `ofType` is a valid field."""
  LIST

  """Indicates this type is a non-null. `ofType` is a valid field."""
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has
a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!
  description: String
  args: [__InputValue!]!
  type: __Type!
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an
InputObject are represented as Input Values which describe their type and
optionally a default value.
"""
type __InputValue {
  name: String!
  description: String
  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a
placeholder for a string or numeric value. However an Enum value is returned in
a JSON response as a string.
"""
type __EnumValue {
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior
in ways field arguments will not suffice, such as conditionally including or
skipping a field. Directives provide this by describing additional information
to the executor.
"""
type __Directive {
  name: String!
  description: String
  args: [__InputValue!]!
  isRepeatable: Boolean!
  locations: [__DirectiveLocation!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a
__DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """Location adjacent to a query operation."""
  QUERY

  """Location adjacent to a mutation operation."""
  MUTATION

  """Location adjacent to a subscription operation."""
  SUBSCRIPTION

  """Location adjacent to a field."""
  FIELD

  """Location adjacent to a fragment definition."""
  FRAGMENT_DEFINITION

  """Location adjacent to a fragment spread."""
  FRAGMENT_SPREAD

  """Location adjacent to an inline fragment."""
  INLINE_FRAGMENT

  """Location adjacent to a variable definition."""
  VARIABLE_DEFINITION

  """Location adjacent to a schema definition."""
  SCHEMA

  """Location adjacent to a scalar definition."""
  SCALAR

  """Location adjacent to an object type definition."""
  OBJECT

  """Location adjacent to a field definition."""
  FIELD_DEFINITION

  """Location adjacent to an argument definition."""
  ARGUMENT_DEFINITION

  """Location adjacent to an interface definition."""
  INTERFACE

  """Location adjacent to a union definition."""
  UNION

  """Location adjacent to an enum definition."""
  ENUM

  """Location adjacent to an enum value definition."""
  ENUM_VALUE

  """Location adjacent to an input object type definition."""
  INPUT_OBJECT

  """Location adjacent to an input object field definition."""
  INPUT_FIELD_DEFINITION
}

"""Directions for ordering a list of records."""
enum SortOrder {
  """Sort records in ascending order."""
  ASC

  """Sort records in descending order."""
  DESC
}

"""
Aggregate functions when ordering by a relation without specifying a column.
"""
enum OrderByRelationAggregateFunction {
  """Amount of items."""
  COUNT
}

"""
Aggregate functions when ordering by a relation that may specify a column.
"""
enum OrderByRelationWithColumnAggregateFunction {
  """Average."""
  AVG

  """Minimum."""
  MIN

  """Maximum."""
  MAX

  """Sum."""
  SUM

  """Amount of items."""
  COUNT
}

"""Allows ordering a list of records."""
input OrderByClause {
  """The column that is used for ordering."""
  column: String!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""Information about pagination using a simple paginator."""
type SimplePaginatorInfo {
  """Number of items in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the first item in the current page."""
  firstItem: Int

  """Index of the last item in the current page."""
  lastItem: Int

  """Number of items per page."""
  perPage: Int!

  """Are there more pages after this one?"""
  hasMorePages: Boolean!
}

"""Information about pagination using a Relay style cursor connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """The cursor to continue paginating backwards."""
  startCursor: String

  """The cursor to continue paginating forwards."""
  endCursor: String

  """Total number of nodes in the paginated connection."""
  total: Int!

  """Number of nodes in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the last available page."""
  lastPage: Int!
}

"""
Specify if you want to include or exclude trashed results from a query.
"""
enum Trashed {
  """Only return trashed results."""
  ONLY

  """Return both trashed and non-trashed results."""
  WITH

  """Only return non-trashed results."""
  WITHOUT
}
